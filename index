<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MENAKIM</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
    window.__firebase_config = JSON.stringify({
      apiKey: "AIzaSyD3kaQ2apkDA-PnyrFxANj0RISbJ47WWcI",
      authDomain: "menakim-65c55.firebaseapp.com",
      projectId: "menakim-65c55",
      storageBucket: "menakim-65c55.appspot.com",
      messagingSenderId: "87825869270",
      appId: "1:87825869270:web:ef6f0538cfa456967d1c77",
      measurementId: "G-6LLRZQ98H6"
    });
    </script>
    <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, onSnapshot, collection, query, addDoc, getDocs, runTransaction, updateDoc, deleteDoc, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    // Global variables provided by the environment
    const appId = typeof window.__app_id !== 'undefined' ? window.__app_id : 'default-app-id';
    const initialAuthToken = typeof window.__initial_auth_token !== 'undefined' ? window.__initial_auth_token : null;

    // Firebase config from global
    const firebaseConfig = JSON.parse(typeof window.__firebase_config !== 'undefined' ? window.__firebase_config : '{}');

    // Firestore paths for data storage
    const publicCollectionPath = `/artifacts/${appId}/public/data/links`;
    const privateCollectionPath = (uid) => `/artifacts/${appId}/users/${uid}/links`;

    // Admin user ID
    const ADMIN_USER_ID = 'U5YiIAmf2QeSPC74N0EXEeoQf6r2';

    // State
    let db, auth;
    let userId;
    const reportedLinks = new Set();

    // UI Elements
    let form, urlInput, linksContainer, messageBox, userIdDisplay, loginMessage, loadingMessage;

    // Set up everything after DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        form = document.getElementById('link-form');
        urlInput = document.getElementById('url-input');
        linksContainer = document.getElementById('links-container');
        messageBox = document.getElementById('message-box');
        userIdDisplay = document.getElementById('user-id-display');
        loginMessage = document.getElementById('login-message');
        loadingMessage = document.getElementById('loading-links-message');

        document.getElementById('share-facebook').addEventListener('click', () => shareApp('facebook'));
        document.getElementById('share-x').addEventListener('click', () => shareApp('x'));
        document.getElementById('share-whatsapp').addEventListener('click', () => shareApp('whatsapp'));

        form.addEventListener('submit', handleSubmit);

        setLogLevel('debug');
        setupFirebase();
    });

    async function setupFirebase() {
        if (Object.keys(firebaseConfig).length === 0) {
            console.error("Firebase config is missing.");
            loginMessage.textContent = "Error: Configuración de Firebase no encontrada.";
            return;
        }
        try {
            const app = initializeApp(firebaseConfig);
            auth = getAuth(app);
            db = getFirestore(app);

            if (initialAuthToken) {
                await signInWithCustomToken(auth, initialAuthToken);
                loginMessage.textContent = "¡Conectado exitosamente!";
            } else {
                console.error("Initial authentication token is missing.");
                loginMessage.textContent = "Error: Token de autenticación no disponible.";
                return;
            }

            userId = auth.currentUser.uid;
            userIdDisplay.textContent = `Tu ID de usuario: ${userId}`;

            setupRealtimeListeners();
        } catch (error) {
            console.error("Firebase initialization failed:", error);
            loginMessage.textContent = `Error de autenticación: ${error.message}`;
        }
    }

    function setupRealtimeListeners() {
        if (!db || !auth || !auth.currentUser) {
            console.error("Database or Auth not initialized. Cannot set up listener.");
            return;
        }

        // Listen to user's reported links
        const privateQuery = query(collection(db, privateCollectionPath(auth.currentUser.uid)));
        onSnapshot(privateQuery, (querySnapshot) => {
            reportedLinks.clear();
            querySnapshot.forEach(doc => reportedLinks.add(doc.id));
            console.log("Enlaces reportados por el usuario actualizados:", reportedLinks);
        }, (error) => {
            console.error("Error al escuchar los enlaces reportados del usuario:", error);
        });

        // Listen to public links
        console.log('Setting up real-time listener for public links:', publicCollectionPath);
        const publicQuery = query(collection(db, publicCollectionPath));
        onSnapshot(publicQuery, (querySnapshot) => {
            loadingMessage.style.display = 'none';
            linksContainer.innerHTML = '';
            const links = [];
            querySnapshot.forEach((doc) => {
                links.push({ id: doc.id, ...doc.data() });
            });

            links.sort((a, b) => (b.reportCount || 0) - (a.reportCount || 0));

            if (links.length === 0) {
                linksContainer.innerHTML = '<p class="text-gray-500 text-center p-8">No hay enlaces publicados todavía. ¡Sé el primero en subir uno!</p>';
            } else {
                links.forEach(link => {
                    createLinkCard(link, reportedLinks.has(link.id));
                });
            }
        }, (error) => {
            console.error("Error al escuchar los datos públicos:", error);
            if (auth && auth.currentUser) {
                showMessage("Hubo un problema al cargar los enlaces. Por favor, recarga la página. Si el problema persiste, contacta con el soporte.", 'error');
            }
        });
    }

    function createLinkCard(link, isReportedByUser) {
        const card = document.createElement('div');
        let cardClasses = 'bg-white p-6 rounded-2xl shadow-md border border-gray-100 mb-4 transition-transform transform hover:scale-[1.01]';
        if (link.isResolved) {
            cardClasses = 'bg-green-50 p-6 rounded-2xl shadow-md border-2 border-green-300 mb-4';
        }
        card.className = cardClasses;

        let buttonHtml = '';
        let helperMessageHtml = '';

        if (link.isResolved) {
            buttonHtml = `<span class="text-green-600 font-semibold text-sm">Resuelto ✅</span>`;
        } else {
            if (isReportedByUser) {
                buttonHtml = `<button class="report-btn px-4 py-2 bg-gray-400 text-white text-sm font-semibold rounded-full cursor-not-allowed" disabled>Reportado</button>`;
                helperMessageHtml = `<p class="mt-2 text-xs text-gray-500">¡Gracias por tu contribución! Ahora, ve al enlace y repórtalo en la red social.</p>`;
            } else {
                buttonHtml += `<button class="report-btn px-4 py-2 bg-red-500 text-white text-sm font-semibold rounded-full hover:bg-red-600 transition-colors shadow-sm">Reportar</button>`;
            }
            if (userId === ADMIN_USER_ID) {
                buttonHtml += ` <button class="resolve-btn px-4 py-2 bg-blue-500 text-white text-sm font-semibold rounded-full hover:bg-blue-600 transition-colors shadow-sm">Marcar como resuelto</button>`;
                buttonHtml += ` <button class="delete-btn px-4 py-2 bg-gray-600 text-white text-sm font-semibold rounded-full hover:bg-gray-700 transition-colors shadow-sm">Eliminar</button>`;
            }
        }

        card.innerHTML = `
            <a href="${link.url}" target="_blank" class="text-blue-600 hover:text-blue-800 hover:underline font-semibold text-lg break-words">${link.url}</a>
            <div class="mt-4 flex items-center justify-between">
                <span class="text-sm font-medium text-red-600">Reportes: <span class="report-count">${link.reportCount || 0}</span></span>
                <div class="flex items-center space-x-2">
                    ${buttonHtml}
                </div>
            </div>
            ${helperMessageHtml}
        `;

        const reportBtn = card.querySelector('.report-btn');
        if (reportBtn) {
            reportBtn.addEventListener('click', (e) => handleReport(link.id, e.target));
        }

        const resolveBtn = card.querySelector('.resolve-btn');
        if (resolveBtn) {
            resolveBtn.addEventListener('click', () => handleResolve(link.id));
        }

        const deleteBtn = card.querySelector('.delete-btn');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', () => handleDelete(link.id));
        }

        linksContainer.appendChild(card);
    }

    async function handleSubmit(e) {
        e.preventDefault();

        const user = auth.currentUser;
        if (!user) {
            showMessage('No estás autenticado. Por favor, espera a que la página se cargue completamente y vuelve a intentarlo.', 'error');
            return;
        }

        const url = urlInput.value.trim();

        if (!url) {
            showMessage('Por favor, ingresa una URL válida.', 'error');
            return;
        }

        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            showMessage('La URL debe comenzar con http:// o https://', 'error');
            return;
        }

        try {
            const q = query(collection(db, publicCollectionPath));
            const querySnapshot = await getDocs(q);
            const existingLink = querySnapshot.docs.find(doc => doc.data().url === url);

            if (existingLink) {
                showMessage('Este enlace ya ha sido publicado.', 'error');
            } else {
                await addDoc(collection(db, publicCollectionPath), {
                    url: url,
                    reportCount: 0,
                    submittedBy: user.uid,
                    createdAt: new Date(),
                    isResolved: false
                });
                showMessage('¡Enlace enviado con éxito!');
                urlInput.value = '';
            }
        } catch (error) {
            console.error("Error adding link:", error);
            showMessage("Error al enviar el enlace. Inténtalo de nuevo.", 'error');
        }
    }

    async function handleReport(linkId, buttonElement) {
        const user = auth.currentUser;
        if (!user) {
            showMessage('No se pudo registrar tu reporte. Por favor, recarga la página.', 'error');
            return;
        }

        const linkRef = doc(db, publicCollectionPath, linkId);
        const userRef = doc(db, privateCollectionPath(user.uid), linkId);

        try {
            await runTransaction(db, async (transaction) => {
                const linkDoc = await transaction.get(linkRef);
                const userReportDoc = await transaction.get(userRef);

                if (!linkDoc.exists()) {
                    throw new Error("El enlace ya no existe.");
                }

                if (userReportDoc.exists()) {
                    showMessage('Ya has reportado este enlace.', 'error');
                    return;
                }

                const newReportCount = (linkDoc.data().reportCount || 0) + 1;

                transaction.update(linkRef, { reportCount: newReportCount });
                transaction.set(userRef, { reportedAt: new Date(), linkId: linkId });

                showMessage('¡Reporte enviado! Gracias por tu contribución.', 'success');
            });
        } catch (error) {
            console.error("Error reporting link:", error);
            showMessage(`Error al reportar el enlace: ${error.message}`, 'error');
        }
    }

    async function handleResolve(linkId) {
        const user = auth.currentUser;
        if (!user) {
            showMessage('No se pudo marcar como resuelto. Por favor, recarga la página.', 'error');
            return;
        }

        if (userId !== ADMIN_USER_ID) {
            showMessage('No tienes permiso para realizar esta acción.', 'error');
            return;
        }

        const linkRef = doc(db, publicCollectionPath, linkId);

        try {
            await updateDoc(linkRef, {
                isResolved: true
            });
            showMessage('¡Enlace marcado como resuelto!', 'success');
        } catch (error) {
            console.error("Error resolving link:", error);
            showMessage(`Error al marcar el enlace como resuelto: ${error.message}`, 'error');
        }
    }

    async function handleDelete(linkId) {
        if (userId !== ADMIN_USER_ID) {
            showMessage('No tienes permiso para realizar esta acción.', 'error');
            return;
        }

        const linkRef = doc(db, publicCollectionPath, linkId);

        try {
            await deleteDoc(linkRef);
            showMessage('Enlace y reportes asociados eliminados con éxito.', 'success');
        } catch (error) {
            console.error("Error deleting link:", error);
            showMessage(`Error al eliminar el enlace: ${error.message}`, 'error');
        }
    }

    function showMessage(message, type = 'success') {
        messageBox.textContent = message;
        messageBox.style.display = 'block';
        if (type === 'success') {
            messageBox.className = 'p-3 rounded-lg text-sm bg-green-100 text-green-800 border border-green-200 mt-4';
        } else {
            messageBox.className = 'p-3 rounded-lg text-sm bg-red-100 text-red-800 border border-red-200 mt-4';
        }
        setTimeout(() => {
            messageBox.style.display = 'none';
        }, 5000);
    }

    function shareApp(platform) {
        const url = window.location.href;
        let shareUrl;
        let text = "¡Únete a MENAKIM! Ayuda a combatir el lenguaje de odio en redes sociales. Juntos podemos hacer la diferencia. #Menakim";

        switch (platform) {
            case 'facebook':
                shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
                break;
            case 'x':
                shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
                break;
            case 'whatsapp':
                shareUrl = `https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`;
                break;
            default:
                return;
        }
        window.open(shareUrl, '_blank');
    }
    </script>
</head>
<body class="bg-gray-50 min-h-screen font-sans antialiased text-gray-800">
    <div class="max-w-xl mx-auto p-4 sm:p-6 lg:p-8">
        <header class="text-center mb-10 mt-6">
            <h1 class="text-6xl sm:text-7xl font-extrabold text-blue-800">MENAKIM</h1>
            <p class="text-lg sm:text-xl font-medium mt-2 text-gray-600">
                Luchando contra la judeofobia en las redes sociales.
            </p>
        </header>
        <main>
            <div id="login-message" class="text-center text-sm font-medium mb-4 text-gray-500">
                Conectando...
            </div>
            <div id="user-id-display" class="bg-gray-100 text-gray-600 text-center text-xs p-2 rounded-lg mb-6 break-words"></div>
            <div class="bg-white p-6 rounded-2xl shadow-md border border-gray-100 mb-8">
                <h2 class="text-2xl font-bold mb-4 text-gray-900">Guía Rápida para Reportar</h2>
                <p class="text-gray-700 text-sm mb-4">
                    Una vez que hagas clic en un enlace para ir a la publicación original, sigue estos pasos para reportar el contenido directamente en la red social.
                </p>
                <div class="space-y-4">
                    <div>
                        <h3 class="font-semibold text-blue-600">En X (antes Twitter)</h3>
                        <ul class="list-disc list-inside text-sm text-gray-700 mt-1">
                            <li>Haz clic en los tres puntos (<span class="font-bold">...</span>) en la esquina superior derecha del post.</li>
                            <li>Selecciona <strong>"Reportar"</strong>.</li>
                            <li>Elige la opción <strong>"Contenido que incita al odio"</strong> (o similar) y sigue las instrucciones. </li>
                        </ul>
                    </div>
                    <div>
                        <h3 class="font-semibold text-blue-600">En Facebook</h3>
                        <ul class="list-disc list-inside text-sm text-gray-700 mt-1">
                            <li>En la publicación, haz clic en los tres puntos (<span class="font-bold">...</span>) en la esquina superior derecha.</li>
                            <li>Selecciona <strong>"Reportar publicación"</strong>.</li>
                            <li>Sigue las instrucciones en pantalla para elegir la razón del reporte, como <strong>"Discurso de odio"</strong> o <strong>"Violencia"</strong>. </li>
                        </ul>
                    </div>
                    <div>
                        <h3 class="font-semibold text-blue-600">En WhatsApp</h3>
                        <ul class="list-disc list-inside text-sm text-gray-700 mt-1">
                            <li>En el chat, mantén presionado el mensaje que quieres reportar.</li>
                            <li>Toca el ícono de los tres puntos (<span class="font-bold">...</span>) y selecciona <strong>"Reportar"</strong>.</li>
                            <li>Confirma tu decisión y elige la opción que mejor se adapte al contenido de incitación al odio. </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="bg-gray-100 p-6 rounded-2xl shadow-inner border border-gray-200 mb-6">
                <h2 class="text-xl font-bold mb-3 text-gray-800">Cómo usar MENAKIM</h2>
                <p class="text-sm text-gray-700">
                    Tu participación es crucial para mantener nuestra comunidad segura. Si encuentras contenido que promueve el odio o es ofensivo, por favor, sigue estos pasos:
                </p>
                <ul class="list-disc list-inside mt-3 space-y-1 text-sm text-gray-700">
                    <li><span class="font-semibold">Paso 1: Sube el enlace.</span> Pega la URL de la publicación en el formulario de abajo y presiona "Publicar Enlace".</li>
                    <li><span class="font-semibold">Paso 2: Vota para reportar.</span> Una vez que el enlace aparezca en la lista, haz clic en el botón <span class="font-bold text-red-500">"Reportar"</span> para registrarlo.</li>
                    <li><span class="font-semibold">Paso 3: Actúa.</span> A medida que más usuarios reportan un enlace, este sube en nuestra lista. Visita la publicación original en la red social y repórtala.</li>
                </ul>
            </div>
            <div class="bg-white p-6 rounded-2xl shadow-md border border-gray-100">
                <h2 class="text-2xl font-bold mb-4 text-gray-900">Subir un Enlace</h2>
                <form id="link-form" class="space-y-4">
                    <div>
                        <input type="url" id="url-input" placeholder="Pega aquí el enlace de una red social..." required class="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-400 focus:outline-none" />
                    </div>
                    <button type="submit" class="w-full px-4 py-3 bg-blue-600 text-white font-semibold rounded-xl hover:bg-blue-700 transition-colors shadow-lg">Publicar Enlace</button>
                </form>
            </div>
            <div id="message-box" class="hidden mt-4"></div>
            <div class="mt-8">
                <h2 class="text-2xl font-bold mb-4 text-gray-900">Enlaces a Reportar</h2>
                <div id="links-container" class="space-y-4">
                    <p id="loading-links-message" class="text-gray-500 text-center p-8">Cargando enlaces...</p>
                </div>
            </div>
            <div class="bg-gray-100 p-6 rounded-2xl shadow-inner border border-gray-200 mt-8 text-center">
                <h2 class="text-xl font-bold mb-3 text-gray-800">¡Corre la voz!</h2>
                <p class="text-sm text-gray-700 mb-4">
                    Ayúdanos a crecer compartiendo MENAKIM con tus amigos.
                </p>
                <div class="flex justify-center space-x-4">
                    <button id="share-facebook" class="w-12 h-12 rounded-full bg-blue-600 text-white flex items-center justify-center hover:bg-blue-700 transition-colors shadow-lg">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                            <path fill-rule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.505 1.492-3.89 3.777-3.89 1.094 0 2.2.195 2.2.195v2.42h-1.24c-1.223 0-1.6.762-1.6 1.545V12h2.72l-.434 2.891h-2.286V21.88C18.343 21.13 22 16.991 22 12z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <button id="share-x" class="w-12 h-12 rounded-full bg-gray-800 text-white flex items-center justify-center hover:bg-black transition-colors shadow-lg">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M18.82 5.564c-.69-.307-1.428-.514-2.2-.625.797-.478 1.405-1.234 1.694-2.13-.746.44-1.576.76-2.454.93-.706-.75-1.714-1.22-2.836-1.22-2.148 0-3.89 1.742-3.89 3.89 0 .304.03.6.09.883C7.728 7.055 4.1 5.13 1.67 2.149c-.334.573-.527 1.24-.527 1.95 0 1.345.685 2.53 1.727 3.226-.636-.02-1.234-.195-1.758-.486v.05c0 1.88 1.337 3.448 3.11 3.804-.326.09-.67.14-1.025.14-.25 0-.49-.024-.726-.07.49 1.523 1.916 2.633 3.605 2.664-1.32 1.034-2.99 1.65-4.8 1.65-.312 0-.617-.018-.92-.053C2.82 19.06 6.17 20.5 9.92 20.5c5.65 0 8.75-4.68 8.75-8.75 0-.134-.003-.27-.01-.403.6-.44 1.12-.99 1.53-1.618z" />
                        </svg>
                    </button>
                    <button id="share-whatsapp" class="w-12 h-12 rounded-full bg-green-500 text-white flex items-center justify-center hover:bg-green-600 transition-colors shadow-lg">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M12.03 2.5a9.53 9.53 0 00-8.2 4.67A9.53 9.53 0 003.5 12c0 2.4.87 4.61 2.3 6.3l-1.5 4.3.46.46 4.3-1.5c1.69 1.43 3.9 2.3 6.3 2.3h.03a9.53 9.53 0 008.2-4.67A9.53 9.53 0 0020.5 12c0-5.24-4.25-9.5-9.47-9.5zm0 17.5a8.04 8.04 0 01-4.28-1.26l-.31-.19-2.55.89.87-2.48-.2-.32A8.06 8.06 0 014.02 12c0-4.43 3.6-8.03 8.03-8.03 4.43 0 8.03 3.6 8.03 8.03 0 4.43-3.6 8.03-8.03 8.03zm4.91-5.27c-.1-.13-.5-.38-.9-.5-.4-.12-.7-.18-.98.12-.2.2-.76.92-.93 1.1-.17.18-.34.2-.62.08-.28-.1-.99-.36-1.89-1.16-.6-.54-.99-1.2-.2-1.22l.6-.01c.2-.01.3-.06.4-.18.1-.12.45-.52.62-.72.17-.2.14-.37.1-.52-.04-.15-.41-1.02-.56-1.39-.15-.37-.3-.32-.41-.33-.11-.01-.24-.01-.36-.01-.12 0-.32.05-.48.23-.16.18-.63.61-.63 1.49 0 .87.65 1.71.74 1.83.09.12 1.27 1.94 3.1 2.65.43.18.77.29 1.03.37.43.14.82.12 1.13.07.35-.05 1.08-.44 1.24-.87.15-.43.15-.8.1-.87z"/>
                        </svg>
                    </button>
                </div>
            </div>
        </main>
    </div>
</body>
</html>
